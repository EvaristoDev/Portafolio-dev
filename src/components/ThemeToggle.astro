---
import SunIcon from "@/icons/Sun.astro"
import MoonIcon from "@/icons/Moon.astro"
import SystemIcon from "@/icons/System.astro"

const THEMES = ["Light", "Dark", "System"]
---

<div class="relative ml-1 mr-1">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition text-gray-700 dark:text-blue-400"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>
  
  <div
  id="themes-menu"
  class="absolute hidden scale-80 top-8 right-0 text-sm p-2 min-w-[8rem] rounded-lg 
  border border-gray-300 bg-white/95 text-gray-900 shadow-lg 
  dark:border-gray-700 dark:bg-gray-900/95 dark:text-gray-100 
  dark:shadow-[0_4px_15px_rgba(255,255,255,0.08)] backdrop-blur-md"
>

    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default rounded-sm 
            hover:bg-gray-200 dark:hover:bg-blue-900 text-gray-900 dark:text-blue-400">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>


<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline defer>
  document.addEventListener("DOMContentLoaded", function() {
    const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
    const themesMenu = document.getElementById("themes-menu");

    const getThemePreference = () => {
      const savedTheme = localStorage.getItem("theme");
      if (savedTheme && ['light', 'dark', 'system'].includes(savedTheme)) {
        return savedTheme;
      }
      return 'system';
    };

    const updateIcon = (themePreference) => {
      document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
        element.style.transform = element.id === themePreference ? "scale(1)" : "scale(0)";
      });
    };

    const updateTheme = () => {
      const themePreference = getThemePreference();
      const isDark = themePreference === 'dark' || (themePreference === 'system' && matchMedia.matches);

      updateIcon(themePreference);
      document.documentElement.classList.toggle('dark', isDark);

      // Mostrar el gradiente adecuado segÃºn el tema
      const darkBg = document.getElementById("dark-bg");
      const lightBg = document.getElementById("light-bg");

      if (darkBg && lightBg) {
        darkBg.style.display = isDark ? "block" : "none";
        lightBg.style.display = isDark ? "none" : "block";
      } else {
        console.error("No se encontraron los elementos dark-bg o light-bg.");
      }
    };

    document.querySelectorAll(".themes-menu-option").forEach((element) => {
      element.addEventListener("click", (e) => {
        e.stopPropagation();
        const theme = e.target.innerText.toLowerCase().trim();
        localStorage.setItem("theme", theme);
        updateTheme();
        themesMenu.classList.remove("open");
      });
    });

    updateTheme();

    document.addEventListener("click", () => themesMenu.classList.remove("open"));

    const themeToggleBtn = document.getElementById("theme-toggle-btn");
    if (themeToggleBtn) {
      themeToggleBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        themesMenu.classList.toggle("open");
      });
    }

    document.addEventListener('astro:after-swap', () => {
      updateTheme();
      window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
    });
  });
</script>
