---

import ThemeToggle from "./ThemeToggle.astro"
import LanguageSwitcher from '@/components/LanguageSwitcher.astro';

const navItems = [
{
    title: "Inicio",
    label: "inicio",
    url: "/#about",
  },
  {
    title: "Experiencia",
    label: "experiencia",
    url: "/#experiencia",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/#proyectos",
  },
  
  {
    title: "Certificaciones",
    label: "certificaciones",
    url: "/#certificaciones",
  },
  {
    title: "Curriculum",
    label: "curriculum",
    url: "/indexMinimalist",
  },
]
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-blue-700 justify-center items-center"
  >
  {
    navItems.map((link) => (
      <a
        class={`relative block px-2 py-2 transition ${
          link.title === "Curriculum" ? "text-blue-500" : "hover:text-blue-500 dark:hover:text-blue-500"
        }`}
        aria-label={link.label}
        href={link.url}
      >
        {link.title}
      </a>
    ))
  }
    <ThemeToggle />
    <LanguageSwitcher client:load />

  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500")
            } else {
              item.classList.remove("text-blue-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
  animation: nav-shadow 1s linear both;
  animation-timeline: scroll();
  animation-range: 0 100px;
}


  @keyframes nav-shadow {
  0% {
    background-color: rgba(31, 41, 55, 0); /* dark:bg-gray-800/0 */
    background-color: rgba(255, 255, 255, 0); /* bg-white/0 */
  }
  100% {
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
                0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-lg */
    backdrop-filter: blur(10px); /* backdrop-blur */
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1); /* ring-white/10 */
  }
}

</style>
